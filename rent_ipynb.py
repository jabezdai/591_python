# -*- coding: utf-8 -*-
"""rent.ipynb（副本）

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gmFn7g6qyUvMGAHyN1ZE12W4nUsKwpkd
"""

from google.colab import drive
drive.mount('/content/drive')



import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go
from plotly import tools
from plotly.offline import init_notebook_mode,iplot
from array import array

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()


init_notebook_mode(connected=True)
plt.rcParams.update({'figure.max_open_warning': 0})

import requests
import time
import random
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from bs4 import BeautifulSoup
options = webdriver.ChromeOptions()
options.add_argument("headless")

!pip install selenium
!apt-get update # to update ubuntu to correctly run apt install
!apt install chromium-chromedriver
!cp /usr/lib/chromium-browser/chromedriver /usr/bin
import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument('--headless')
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--disable-dev-shm-usage')

df0 = pd.read_csv('drive/MyDrive/cache/df_listings0.csv')
df105 = pd.read_csv('drive/MyDrive/cache/df_listings105.csv')
df210 = pd.read_csv('drive/MyDrive/cache/df_listings210.csv')
df315 = pd.read_csv('drive/MyDrive/cache/df_listings315.csv')
df0.head()

def get_coordinate(addr):
    browser = webdriver.Chrome('chromedriver',chrome_options=chrome_options)
    browser.get("http://www.map.com.tw/")
    search = browser.find_element_by_id("searchWord")
    search.clear()
    search.send_keys(addr)
    browser.find_element_by_xpath("/html/body/form/div[10]/div[2]/img[2]").click() 
    time.sleep(random.random() * 5)
#     iframe = browser.find_elements_by_tag_name("iframe")[1] This will be thrown error due to the number of iframes changed
    iframe = browser.find_elements_by_class_name("winfoIframe")[0]
    browser.switch_to.frame(iframe)
    coor_btn = browser.find_element_by_xpath("/html/body/form/div[4]/table/tbody/tr[3]/td/table/tbody/tr/td[2]")
    coor_btn.click()
    coor = browser.find_element_by_xpath("/html/body/form/div[5]/table/tbody/tr[2]/td")
    coor = coor.text.strip().split(" ")
    lat = coor[-1].split("：")[-1]
    log = coor[0].split("：")[-1]
    browser.quit()
    return (lat, log)

df0.shape

df0 = df0.append(df105)
df0 = df0.append(df210)
df0 = df0.append(df315)

cols = ['price','性別', '格局', '坪數', '樓層', '型態']

cols_item = ['price','性別', '格局', '坪數', '樓層', '型態']

dfNew = df0[cols]
df0 = df0.fillna('None')

for d in df0[:]['提供設備']:
  if not d is None:
    equip = d.split(',')
    for item in equip:
      if item not in cols_item:
        cols_item.append(item)
        dfNew[item] = 0
      dfNew.loc[df0.index[df0['提供設備'] == d],item] = 1
      """
dfNew['lat'] = 0
dfNew['log'] = 0
for adr in df0[:]['社區']:
  
  dfNew.loc[df0.index[df0['社區'] == adr],'lat'] = get_coordinate(adr)[0]
  dfNew.loc[df0.index[df0['社區'] == adr],'log'] = get_coordinate(adr)[1]
dfNew = dfNew.fillna(0)
"""
#dfNew['坪數'] = dfNew['坪數'].str.replace('坪',)
dfNew.head()

data_hot = pd.get_dummies(dfNew)
data_hot.head()

plt.rcParams['font.sans-serif'] = ['Microsoft JhengHei'] 
plt.rcParams['axes.unicode_minus'] = False
plt.figure(figsize = (20,20))
sns.heatmap(dfNew.corr(), annot = True, cmap = "Blues")
plt.show()

"""<h3> Split the data into train test </h3>"""

from sklearn.model_selection import train_test_split
from sklearn import preprocessing
#class column is taken as a numpy array
y = data_hot["price"].values
#All the features are separated from our target value or label and stored in x
x = data_hot.drop(["price"],axis=1)
#x = data_hot.drop(["price"],axis=1)
#Finally split the data into train and test set
x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=50,test_size = 0.25)

"""<h3><FONT COLOR="green">KNN Classification</FONT COLOR></h3>"""

from sklearn.neighbors import KNeighborsClassifier
best_Kvalue = 0
best_score=0
for i in range(1,10):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(x_train,y_train)
    if knn.score(x_test,y_test) > best_score:
        best_score = knn.score(x_test,y_test)
        best_Kvalue = i
print("""Best KNN Value: {}
Test Accuracy: {}%""".format(best_Kvalue, round(best_score*100,2)))

knn.predict(x_test)

y_test

get_score(knn.predict(x_test),y_test)

"""<h3><FONT COLOR="green">Naive Bayes Classification</FONT COLOR></h3>"""

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(x_train,y_train)
print("Test Accuracy: {}%".format(round(nb.score(x_test,y_test)*100,2)))

get_score(nb.predict(x_test),y_test)

"""<h3><FONT COLOR="green">Decision Tree Classifier</FONT COLOR></h3>"""

from sklearn.tree import DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(x_train,y_train)
print("Test Accuracy: {}%".format(round(dt.score(x_test,y_test)*100,2)))

get_score(dt.predict(x_test),y_test)

"""<h3><FONT COLOR="green">Random Forest Classifier</FONT COLOR></h3>"""

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(x_train,y_train)
print("Test Accuracy: {}%".format(round(rf.score(x_test,y_test)*100,2)))

get_score(rf.predict(x_test),y_test)

def get_score(x,y):
  correct = 0.0
  for i,j in zip(x,y):
    if i * 1.2 > j and i * 0.8 < j:
      correct += 1
  return correct/len(x)

